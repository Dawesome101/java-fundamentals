/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import org.junit.jupiter.api.Test;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    App app = new App();

    @Test void temperatureTest() {

        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        ArrayList<String> testArray = new ArrayList<>();
        ArrayList<String> testArray2 = new ArrayList<>();

        testArray2 = app.printTempData(weeklyMonthTemperatures);

        testArray.add("High: 72");
        testArray.add("Low: 51");
        testArray.add("Never saw temperature: 63");
        testArray.add("Never saw temperature: 67");
        testArray.add("Never saw temperature: 68");
        testArray.add("Never saw temperature: 69");

        assertTrue(testArray.equals(testArray2));
    }



    @Test void appLinterTest(){

        int noerrors = 0;
        int oneerror = 1;
        int fewerrors = 4;
        int manyerrors = 37;
        int empty = 0;

        Path testPath = Paths.get("src/test/resources/noerrors.txt");
        assertEquals(noerrors, app.readBufferTryWithResources(testPath.toString()));
        System.out.println("");
        testPath = Paths.get("src/test/resources/oneerror.txt");
        assertEquals(oneerror, app.readBufferTryWithResources(testPath.toString()));
        System.out.println("");
        testPath = Paths.get("src/test/resources/fewerrors.txt");
        assertEquals(fewerrors, app.readBufferTryWithResources(testPath.toString()));
        System.out.println("");
        testPath = Paths.get("src/test/resources/manyerrors.txt");
        assertEquals(manyerrors, app.readBufferTryWithResources(testPath.toString()));
        System.out.println("");
        testPath = Paths.get("src/test/resources/empty.txt");
        assertEquals(empty, app.readBufferTryWithResources(testPath.toString()));
        System.out.println("");
    }

    @Test void tallyTest(){

        ArrayList<String> testVotes = new ArrayList<>();

        String testTallyReply = app.tally(testVotes);
        assertEquals("Votes can not be tallied with an empty list.  Please add at least one name to the list.", testTallyReply);

        testVotes.add("Jim");
        testTallyReply = app.tally(testVotes);
        assertEquals("Jim received the most votes!", testTallyReply);

        testVotes.add("Jane");
        testTallyReply = app.tally(testVotes);
        assertEquals("Jane and Jim received the most votes!", testTallyReply);

        testVotes.add("Jane");
        testVotes.add("Jane");
        testVotes.add("Joe");
        testVotes.add("Steve");
        testVotes.add("Luke");
        testTallyReply = app.tally(testVotes);
        assertEquals("Jane received the most votes!", testTallyReply);

        testVotes.add("Jane");
        testVotes.add("Jane");
        testVotes.add("Joe");
        testVotes.add("Steve");
        testVotes.add("Luke");
        testVotes.add("Steve");
        testVotes.add("Luke");
        testVotes.add("Luke");
        testVotes.add("Rick");
        testVotes.add("James");
        testVotes.add("Rick");
        testVotes.add("Rick");
        testVotes.add("Rick");
        testVotes.add("Rick");
        testVotes.add("James");
        testVotes.add("Rick");
        testTallyReply = app.tally(testVotes);
        assertEquals("Rick received the most votes!", testTallyReply);
    }
}
